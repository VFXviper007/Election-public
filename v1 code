from tkinter import *
from customtkinter import *
import sounddevice as sd
import numpy as np
import mysql.connector

conn = mysql.connector.connect(
    host="localhost",
    user="root",
    passwd="root",
    database="election"
)
cursor = conn.cursor()
#headboy candidates
HB1=0
#headgirl candidates
HG1=0
#assistanboy candidates
AB1=0
#assistantgirl candidates
AG1=0

animation_running = False
duration = 0.5
fs = 44100
frequency = 1000

root=Tk()
root.withdraw()

def Headboy():
    headboy = Toplevel()
    topframe = Frame(headboy, bg='#084ca4', height=50)
    topframe.pack(fill="x")
    headboy.geometry("1920x1080")
    headboy.title("BVBVM Election Software V2")
    headboy.config(background="#dbeeff")
    icon = PhotoImage(file='bvblogo2.png')
    headboy.iconphoto(True, icon)
    heading = Label(topframe, text="ELECTION 2025", font=('Ariel', 40, 'bold'), fg='#ffffff', bg='#084ca4')
    heading.pack(pady=20)
    rounded_frame = CTkFrame(headboy, width=250, height=360, corner_radius=30, fg_color="#ffffff")
    rounded_frame.place(x=200, y=200)

    def Headgirl():
        headboy.destroy()
        Headgirlpage = Toplevel()
        topframe = Frame(Headgirlpage, bg='#084ca4', height=50)
        topframe.pack(fill="x")
        Headgirlpage.config(background='#dbeeff')
        Headgirlpage.geometry("1920x1080")
        Headgirlpage.title("BVBVM Election Software V2")
        icon = PhotoImage(file='bvblogo2.png')
        Headgirlpage.iconphoto(True, icon)
        heading = Label(topframe, text="ELECTION 2025", font=('Ariel', 40, 'bold'), fg='#ffffff', bg='#084ca4')
        heading.pack(pady=20)
        rounded_frame=CTkFrame(Headgirlpage,width=250, height=360, corner_radius=30, fg_color="#ffffff")
        rounded_frame.place(x=200, y=200)
        def AssistantHeadboy():
            Headgirlpage.destroy()
            Assiboypage = Toplevel()
            topframe = Frame(Assiboypage, bg='#084ca4', height=50)
            topframe.pack(fill="x")
            Assiboypage.geometry("1920x1080")
            Assiboypage.title("BVBVM Election Software V2")
            Assiboypage.config(background="#dbeeff")
            icon = PhotoImage(file='bvblogo2.png')
            Assiboypage.iconphoto(True, icon)
            heading = Label(topframe, text="ELECTION 2025", font=('Ariel', 40, 'bold'), fg='#ffffff', bg='#084ca4')
            heading.pack(pady=20)
            rounded_frame = CTkFrame(Assiboypage, width=250, height=360, corner_radius=30, fg_color="#ffffff")
            rounded_frame.place(x=200, y=200)

            def Assistantheadgirl():
                Assiboypage.destroy()
                Assigirlpage = Toplevel()
                topframe = Frame(Assigirlpage, bg='#084ca4', height=50)
                topframe.pack(fill="x")
                Assigirlpage.geometry("1920x1080")
                Assigirlpage.title("BVBVM Election Software V2")
                Assigirlpage.config(background="#dbeeff")
                icon = PhotoImage(file='bvblogo2.png')
                Assigirlpage.iconphoto(True, icon)
                heading = Label(topframe, text="ELECTION 2025", font=('Ariel', 40, 'bold'), fg='#ffffff', bg='#084ca4')
                heading.pack(pady=20)
                rounded_frame = CTkFrame(Assigirlpage, width=250, height=360, corner_radius=30, fg_color="#ffffff")
                rounded_frame.place(x=200, y=200)
                # AGcandidate1
                global AG1img
                Assigirlpage.AG1img = PhotoImage(file='nagavalli.png')
                candidate1cord = Label(rounded_frame, image=Assigirlpage.AG1img)
                candidate1cord.place(x=40, y=20)
                candidate1name = Label(rounded_frame, text="nagavalli", font=('Ariel', 18), bg='#ffffff', fg='#084ca4')
                candidate1name.place(x=85, y=274)


                def AG1vote():
                    global AG1
                    AG1 += 1
                    print(AG1)
                    sql = "UPDATE PC1votes SET votes = %s WHERE candidate_name = %s"
                    values = (HG1, "nagavalli")
                    cursor.execute(sql, values)
                    conn.commit()
                    Assigirlpage.destroy()
                    t = np.linspace(0, duration, int(fs * duration), endpoint=False)
                    beep = 0.5 * np.sin(2 * np.pi * frequency * t)
                    sd.play(beep, samplerate=fs)
                    sd.wait()
                    Headboy()

                candidate1button = CTkButton(rounded_frame, text='Vote', command=AG1vote, font=("Ariel", 20),
                                             text_color='#ffffff', fg_color='#084ca4', corner_radius=30, width=35,
                                             height=35)
                candidate1button.place(x=85, y=310)

                def animate(y_start, y_end, step=2, delay=10):
                    """Smooth animation with state management."""
                    global animation_running

                    if animation_running:
                        return

                    animation_running = True

                    def step_motion():
                        nonlocal y_start
                        if abs(y_start - y_end) > step:
                            y_start += step if y_start < y_end else -step
                            rounded_frame.place(y=y_start)
                            root.after(delay, step_motion)
                        else:
                            rounded_frame.place(y=y_end)
                            global animation_running
                            animation_running = False

                    step_motion()

                def on_enter(event):
                    global hovering
                    hovering = True
                    animate(rounded_frame.winfo_y(), 180)  # Move up

                def on_leave(event):
                    global hovering
                    hovering = False
                    root.after(50, check_leave)  # Small delay to prevent flickering

                def check_leave():
                    """Ensures mouse has fully left before moving down."""
                    if not hovering:
                        animate(rounded_frame.winfo_y(), 200)  # Move down

                # Bind events to the entire frame including children
                rounded_frame.bind("<Enter>", on_enter)
                rounded_frame.bind("<Leave>", on_leave)
                for widget in rounded_frame.winfo_children():  # Apply to child widgets
                    widget.bind("<Enter>", on_enter)
                    widget.bind("<Leave>", on_leave)

            # ABcandidate1
            global AB1img
            Assiboypage.AB1img = PhotoImage(file='kollery.png')
            candidate1cord = Label(rounded_frame, image=Assiboypage.AB1img)
            candidate1cord.place(x=40, y=20)
            candidate1name = Label(rounded_frame, text="Kollery", font=('Ariel', 18), bg='#ffffff', fg='#084ca4')
            candidate1name.place(x=85, y=274)

            def AB1vote():
                global AB1
                AB1 += 1
                print(AB1)
                sql = "UPDATE PC1votes SET votes = %s WHERE candidate_name = %s"
                values = (HG1, "kollery")
                cursor.execute(sql, values)
                conn.commit()
                Assistantheadgirl()

            candidate1button = CTkButton(rounded_frame, text='Vote', command=AB1vote, font=("Ariel", 20),
                                         text_color='#ffffff', fg_color='#084ca4', corner_radius=30, width=35,
                                         height=35)
            candidate1button.place(x=85, y=310)

            def animate(y_start, y_end, step=2, delay=10):
                """Smooth animation with state management."""
                global animation_running

                if animation_running:
                    return

                animation_running = True

                def step_motion():
                    nonlocal y_start
                    if abs(y_start - y_end) > step:
                        y_start += step if y_start < y_end else -step
                        rounded_frame.place(y=y_start)
                        root.after(delay, step_motion)
                    else:
                        rounded_frame.place(y=y_end)
                        global animation_running
                        animation_running = False

                step_motion()

            def on_enter(event):
                global hovering
                hovering = True
                animate(rounded_frame.winfo_y(), 180)  # Move up

            def on_leave(event):
                global hovering
                hovering = False
                root.after(50, check_leave)  # Small delay to prevent flickering

            def check_leave():
                """Ensures mouse has fully left before moving down."""
                if not hovering:
                    animate(rounded_frame.winfo_y(), 200)  # Move down

            # Bind events to the entire frame including children
            rounded_frame.bind("<Enter>", on_enter)
            rounded_frame.bind("<Leave>", on_leave)
            for widget in rounded_frame.winfo_children():  # Apply to child widgets
                widget.bind("<Enter>", on_enter)
                widget.bind("<Leave>", on_leave)
            # ABcandidate2
            # ABcandidate3
            # ABcandidate4

        # HGcandidate1
        global HG1img
        Headgirlpage.HG1img = PhotoImage(file='anjALI.png')
        candidate1cord = Label(rounded_frame,image= Headgirlpage.HG1img)
        candidate1cord.place(x=40, y=20)
        candidate1name = Label(rounded_frame, text="anjALI", font=('Ariel', 18), bg='#ffffff', fg='#084ca4')
        candidate1name.place(x=85, y=274)

        def HG1vote():
            global HG1
            HG1 += 1
            print(HG1)
            sql = "UPDATE PC1votes SET votes = %s WHERE candidate_name = %s"
            values = (HG1, "anjAli")
            cursor.execute(sql, values)
            conn.commit()
            AssistantHeadboy()

        candidate1button = CTkButton(rounded_frame, text='Vote', command=HG1vote, font=("Ariel", 20),text_color='#ffffff',fg_color='#084ca4',corner_radius=30,width=35,height=35)
        candidate1button.place(x=85, y=310)

        def animate(y_start, y_end, step=2, delay=10):
            """Smooth animation with state management."""
            global animation_running

            if animation_running:
                return

            animation_running = True

            def step_motion():
                nonlocal y_start
                if abs(y_start - y_end) > step:
                    y_start += step if y_start < y_end else -step
                    rounded_frame.place(y=y_start)
                    root.after(delay, step_motion)
                else:
                    rounded_frame.place(y=y_end)
                    global animation_running
                    animation_running = False

            step_motion()

        def on_enter(event):
            global hovering
            hovering = True
            animate(rounded_frame.winfo_y(), 180)  # Move up

        def on_leave(event):
            global hovering
            hovering = False
            root.after(50, check_leave)  # Small delay to prevent flickering

        def check_leave():
            """Ensures mouse has fully left before moving down."""
            if not hovering:
                animate(rounded_frame.winfo_y(), 200)  # Move down

        # Bind events to the entire frame including children
        rounded_frame.bind("<Enter>", on_enter)
        rounded_frame.bind("<Leave>", on_leave)
        for widget in rounded_frame.winfo_children():  # Apply to child widgets
            widget.bind("<Enter>", on_enter)
            widget.bind("<Leave>", on_leave)

        # HGcandidate2

        # HGcandidate3

        # HGcandidate4

    # HBcandidate1
    headboy.HB1img = PhotoImage(file='damu.png')
    candidate1cord = Label(rounded_frame, image=headboy.HB1img)
    candidate1cord.place(x=25, y=20)
    candidate1name = Label(rounded_frame, text="Dasamolam Damu", font=('Ariel', 18), bg='#ffffff', fg='#084ca4')
    candidate1name.place(x=25, y=275)

    def HB1vote():
        global HB1
        HB1 += 1
        print(HB1)
        sql = "UPDATE PC1votes SET votes = %s WHERE candidate_name = %s"
        values = (HB1, "damu")
        cursor.execute(sql, values)
        conn.commit()
        Headgirl()

    candidate1button = CTkButton(rounded_frame, text='Vote', command=HB1vote, font=("Ariel", 20), text_color='#ffffff',
                                 fg_color='#084ca4', corner_radius=30, width=35, height=35)
    candidate1button.place(x=85, y=310)

    def animate(y_start, y_end, step=2, delay=10):
        """Smooth animation with state management."""
        global animation_running

        if animation_running:
            return

        animation_running = True

        def step_motion():
            nonlocal y_start
            if abs(y_start - y_end) > step:
                y_start += step if y_start < y_end else -step
                rounded_frame.place(y=y_start)
                root.after(delay, step_motion)
            else:
                rounded_frame.place(y=y_end)
                global animation_running
                animation_running = False

        step_motion()

    def on_enter(event):
        global hovering
        hovering = True
        animate(rounded_frame.winfo_y(), 180)  # Move up

    def on_leave(event):
        global hovering
        hovering = False
        root.after(50, check_leave)  # Small delay to prevent flickering

    def check_leave():
        """Ensures mouse has fully left before moving down."""
        if not hovering:
            animate(rounded_frame.winfo_y(), 200)  # Move down

    # Bind events to the entire frame including children
    rounded_frame.bind("<Enter>", on_enter)
    rounded_frame.bind("<Leave>", on_leave)
    for widget in rounded_frame.winfo_children():  # Apply to child widgets
        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)

    #HB candidate2
    root.mainloop()
Headboy()
