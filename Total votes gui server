#!/usr/bin/env python3
"""
Election Administration Dashboard
Real-time GUI for monitoring centralized election results
"""

import tkinter as tk
from tkinter import ttk, messagebox, font
import mysql.connector
from mysql.connector import Error
import json
import threading
import time
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import pandas as pd
import numpy as np

# Configuration (should match server configuration)
DB_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    'password': 'root',
    'database': 'election_central'
}

REFRESH_INTERVAL = 30  # seconds
COLORS = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F']

class DatabaseInterface:
    """Handle all database operations"""
    
    def __init__(self, config):
        self.config = config
    
    def get_connection(self):
        """Get database connection"""
        return mysql.connector.connect(**self.config)
    
    def get_vote_summary(self):
        """Get aggregated vote summary"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor(dictionary=True)
            
            cursor.execute("""
                SELECT candidate_name, category, total_votes, 
                       contributing_pcs, last_updated
                FROM master_votes 
                ORDER BY category, total_votes DESC
            """)
            
            results = cursor.fetchall()
            cursor.close()
            conn.close()
            
            return results
            
        except Error as e:
            print(f"Database error in get_vote_summary: {e}")
            return []
    
    def get_system_stats(self):
        """Get system statistics"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor(dictionary=True)
            
            # Get client statistics
            cursor.execute("""
                SELECT COUNT(*) as total_clients,
                       SUM(CASE WHEN is_active = TRUE THEN 1 ELSE 0 END) as active_clients,
                       SUM(total_syncs) as total_syncs,
                       MAX(last_seen) as last_activity
                FROM registered_clients
            """)
            client_stats = cursor.fetchone()
            
            # Get latest aggregation info
            cursor.execute("""
                SELECT total_candidates, total_votes, participating_pcs,
                       aggregation_timestamp, status, duration_seconds
                FROM aggregation_log 
                ORDER BY aggregation_timestamp DESC 
                LIMIT 1
            """)
            agg_stats = cursor.fetchone()
            
            # Get sync statistics for today
            cursor.execute("""
                SELECT COUNT(*) as syncs_today,
                       SUM(CASE WHEN status = 'success' THEN 1 ELSE 0 END) as successful_syncs,
                       SUM(CASE WHEN status = 'failed' THEN 1 ELSE 0 END) as failed_syncs
                FROM sync_log 
                WHERE DATE(created_at) = CURDATE()
            """)
            sync_stats = cursor.fetchone()
            
            cursor.close()
            conn.close()
            
            return {
                'clients': client_stats or {},
                'aggregation': agg_stats or {},
                'syncs': sync_stats or {}
            }
            
        except Error as e:
            print(f"Database error in get_system_stats: {e}")
            return {'clients': {}, 'aggregation': {}, 'syncs': {}}
    
    def get_client_details(self):
        """Get detailed client information"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor(dictionary=True)
            
            cursor.execute("""
                SELECT pc_id, hostname, first_registered, last_seen,
                       is_active, total_syncs,
                       TIMESTAMPDIFF(MINUTE, last_seen, NOW()) as minutes_since_last_seen
                FROM registered_clients
                ORDER BY last_seen DESC
            """)
            
            results = cursor.fetchall()
            cursor.close()
            conn.close()
            
            return results
            
        except Error as e:
            print(f"Database error in get_client_details: {e}")
            return []
    
    def get_vote_history(self, hours=24):
        """Get vote aggregation history"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor(dictionary=True)
            
            cursor.execute("""
                SELECT aggregation_timestamp, total_votes, participating_pcs
                FROM aggregation_log 
                WHERE aggregation_timestamp >= DATE_SUB(NOW(), INTERVAL %s HOUR)
                AND status = 'success'
                ORDER BY aggregation_timestamp
            """, (hours,))
            
            results = cursor.fetchall()
            cursor.close()
            conn.close()
            
            return results
            
        except Error as e:
            print(f"Database error in get_vote_history: {e}")
            return []

class ElectionDashboard:
    """Main dashboard application"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("Election Administration Dashboard")
        self.root.geometry("1400x900")
        self.root.configure(bg='#f0f0f0')
        
        # Initialize database interface
        self.db = DatabaseInterface(DB_CONFIG)
        
        # Configure styles
        self.setup_styles()
        
        # Create main interface
        self.create_interface()
        
        # Start auto-refresh
        self.auto_refresh = True
        self.start_auto_refresh()
        
        # Initial data load
        self.refresh_all_data()
    
    def setup_styles(self):
        """Configure ttk styles"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configure custom styles
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'), background='#f0f0f0')
        style.configure('Header.TLabel', font=('Arial', 12, 'bold'), background='#f0f0f0')
        style.configure('Status.TLabel', font=('Arial', 10), background='#f0f0f0')
        style.configure('Success.TLabel', font=('Arial', 10), background='#f0f0f0', foreground='green')
        style.configure('Warning.TLabel', font=('Arial', 10), background='#f0f0f0', foreground='orange')
        style.configure('Error.TLabel', font=('Arial', 10), background='#f0f0f0', foreground='red')
    
    def create_interface(self):
        """Create the main interface"""
        # Create main container
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)
        
        # Title
        title_label = ttk.Label(main_frame, text="Election Administration Dashboard", style='Title.TLabel')
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # Create left panel (controls and stats)
        self.create_left_panel(main_frame)
        
        # Create right panel (main content)
        self.create_right_panel(main_frame)
        
        # Status bar
        self.create_status_bar(main_frame)
    
    def create_left_panel(self, parent):
        """Create left control panel"""
        left_frame = ttk.Frame(parent, padding="10")
        left_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        
        # Control buttons
        controls_frame = ttk.LabelFrame(left_frame, text="Controls", padding="10")
        controls_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Button(controls_frame, text="Refresh Data", command=self.refresh_all_data).grid(row=0, column=0, sticky=(tk.W, tk.E), pady=2)
        ttk.Button(controls_frame, text="Export Results", command=self.export_results).grid(row=1, column=0, sticky=(tk.W, tk.E), pady=2)
        ttk.Button(controls_frame, text="System Health", command=self.show_system_health).grid(row=2, column=0, sticky=(tk.W, tk.E), pady=2)
        
        # Auto-refresh control
        self.auto_refresh_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(controls_frame, text="Auto Refresh", 
                       variable=self.auto_refresh_var,
                       command=self.toggle_auto_refresh).grid(row=3, column=0, sticky=(tk.W), pady=5)
        
        # System statistics
        self.stats_frame = ttk.LabelFrame(left_frame, text="System Statistics", padding="10")
        self.stats_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Client information
        self.clients_frame = ttk.LabelFrame(left_frame, text="Connected Clients", padding="10")
        self.clients_frame.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        left_frame.rowconfigure(2, weight=1)
        
        # Create treeview for clients
        self.clients_tree = ttk.Treeview(self.clients_frame, columns=('Status', 'Last Seen', 'Syncs'), height=8)
        self.clients_tree.heading('#0', text='PC ID')
        self.clients_tree.heading('Status', text='Status')
        self.clients_tree.heading('Last Seen', text='Last Seen')
        self.clients_tree.heading('Syncs', text='Syncs')
        
        self.clients_tree.column('#0', width=100)
        self.clients_tree.column('Status', width=60)
        self.clients_tree.column('Last Seen', width=80)
        self.clients_tree.column('Syncs', width=50)
        
        # Scrollbar for clients tree
        clients_scrollbar = ttk.Scrollbar(self.clients_frame, orient=tk.VERTICAL, command=self.clients_tree.yview)
        self.clients_tree.configure(yscrollcommand=clients_scrollbar.set)
        
        self.clients_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        clients_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        self.clients_frame.columnconfigure(0, weight=1)
        self.clients_frame.rowconfigure(0, weight=1)
    
    def create_right_panel(self, parent):
        """Create right content panel"""
        right_frame = ttk.Frame(parent, padding="10")
        right_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        right_frame.columnconfigure(0, weight=1)
        right_frame.rowconfigure(0, weight=1)
        
        # Create notebook for tabs
        self.notebook = ttk.Notebook(right_frame)
        self.notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Results tab
        self.create_results_tab()
        
        # Charts tab
        self.create_charts_tab()
        
        # History tab
        self.create_history_tab()
    
    def create_results_tab(self):
        """Create results display tab"""
        results_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(results_frame, text="Election Results")
        
        results_frame.columnconfigure(0, weight=1)
        results_frame.rowconfigure(0, weight=1)
        
        # Create treeview for results
        self.results_tree = ttk.Treeview(results_frame, columns=('Category', 'Votes', 'Contributing PCs', 'Last Updated'))
        self.results_tree.heading('#0', text='Candidate')
        self.results_tree.heading('Category', text='Category')
        self.results_tree.heading('Votes', text='Total Votes')
        self.results_tree.heading('Contributing PCs', text='PCs')
        self.results_tree.heading('Last Updated', text='Last Updated')
        
        self.results_tree.column('#0', width=200)
        self.results_tree.column('Category', width=150)
        self.results_tree.column('Votes', width=100)
        self.results_tree.column('Contributing PCs', width=100)
        self.results_tree.column('Last Updated', width=150)
        
        # Scrollbars
        results_v_scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.results_tree.yview)
        results_h_scrollbar = ttk.Scrollbar(results_frame, orient=tk.HORIZONTAL, command=self.results_tree.xview)
        self.results_tree.configure(yscrollcommand=results_v_scrollbar.set, xscrollcommand=results_h_scrollbar.set)
        
        self.results_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        results_v_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        results_h_scrollbar.grid(row=1, column=0, sticky=(tk.W, tk.E))
    
    def create_charts_tab(self):
        """Create charts tab"""
        charts_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(charts_frame, text="Visual Charts")
        
        charts_frame.columnconfigure(0, weight=1)
        charts_frame.rowconfigure(0, weight=1)
        
        # Create matplotlib figure
        self.fig = Figure(figsize=(12, 8), dpi=100)
        self.canvas = FigureCanvasTkAgg(self.fig, charts_frame)
        self.canvas.get_tk_widget().grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Chart controls
        chart_controls = ttk.Frame(charts_frame)
        chart_controls.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=10)
        
        ttk.Label(chart_controls, text="Chart Type:").grid(row=0, column=0, padx=5)
        self.chart_type_var = tk.StringVar(value="Bar Chart")
        chart_type_combo = ttk.Combobox(chart_controls, textvariable=self.chart_type_var,
                                       values=["Bar Chart", "Pie Chart", "Category Comparison"])
        chart_type_combo.grid(row=0, column=1, padx=5)
        chart_type_combo.bind('<<ComboboxSelected>>', self.update_charts)
        
        ttk.Button(chart_controls, text="Update Charts", command=self.update_charts).grid(row=0, column=2, padx=10)
    
    def create_history_tab(self):
        """Create history tab"""
        history_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(history_frame, text="Vote History")
        
        history_frame.columnconfigure(0, weight=1)
        history_frame.rowconfigure(1, weight=1)
        
        # History controls
        history_controls = ttk.Frame(history_frame)
        history_controls.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Label(history_controls, text="Time Range:").grid(row=0, column=0, padx=5)
        self.history_range_var = tk.StringVar(value="24 hours")
        history_range_combo = ttk.Combobox(history_controls, textvariable=self.history_range_var,
                                          values=["1 hour", "6 hours", "24 hours", "3 days", "7 days"])
        history_range_combo.grid(row=0, column=1, padx=5)
        history_range_combo.bind('<<ComboboxSelected>>', self.update_history)
        
        # History chart
        self.history_fig = Figure(figsize=(12, 6), dpi=100)
        self.history_canvas = FigureCanvasTkAgg(self.history_fig, history_frame)
        self.history_canvas.get_tk_widget().grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
    
    def create_status_bar(self, parent):
        """Create status bar"""
        status_frame = ttk.Frame(parent)
        status_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
        status_frame.columnconfigure(1, weight=1)
        
        self.status_label = ttk.Label(status_frame, text="Ready", style='Status.TLabel')
        self.status_label.grid(row=0, column=0, padx=(0, 20))
        
        self.last_update_label = ttk.Label(status_frame, text="", style='Status.TLabel')
        self.last_update_label.grid(row=0, column=1)
        
        self.connection_status_label = ttk.Label(status_frame, text="", style='Success.TLabel')
        self.connection_status_label.grid(row=0, column=2)
    
    def refresh_all_data(self):
        """Refresh all data displays"""
        threading.Thread(target=self._refresh_data_thread, daemon=True).start()
    
    def _refresh_data_thread(self):
        """Background thread for data refresh"""
        try:
            self.status_label.config(text="Refreshing data...")
            
            # Test database connection
            try:
                conn = self.db.get_connection()
                conn.close()
                self.root.after(0, lambda: self.connection_status_label.config(text="Database Connected", style='Success.TLabel'))
            except:
                self.root.after(0, lambda: self.connection_status_label.config(text="Database Error", style='Error.TLabel'))
                return
            
            # Refresh results
            results = self.db.get_vote_summary()
            self.root.after(0, lambda: self.update_results_display(results))
            
            # Refresh system stats
            stats = self.db.get_system_stats()
            self.root.after(0, lambda: self.update_stats_display(stats))
            
            # Refresh client info
            clients = self.db.get_client_details()
            self.root.after(0, lambda: self.update_clients_display(clients))
            
            # Update charts
            self.root.after(0, self.update_charts)
            
            # Update history
            self.root.after(0, self.update_history)
            
            # Update status
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.root.after(0, lambda: self.last_update_label.config(text=f"Last updated: {current_time}"))
            self.root.after(0, lambda: self.status_label.config(text="Ready"))
            
        except Exception as e:
            self.root.after(0, lambda: self.status_label.config(text=f"Error: {str(e)}"))
            print(f"Error refreshing data: {e}")
    
    def update_results_display(self, results):
        """Update the results treeview"""
        # Clear existing items
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # Group by category
        categories = {}
        for result in results:
            category = result['category']
            if category not in categories:
                categories[category] = []
            categories[category].append(result)
        
        # Insert results grouped by category
        for category, candidates in categories.items():
            # Sort candidates by votes (descending)
            candidates.sort(key=lambda x: x['total_votes'], reverse=True)
            
            for candidate in candidates:
                contributing_pcs = len(json.loads(candidate['contributing_pcs'])) if candidate['contributing_pcs'] else 0
                last_updated = candidate['last_updated'].strftime("%Y-%m-%d %H:%M") if candidate['last_updated'] else "Never"
                
                self.results_tree.insert('', tk.END,
                                       text=candidate['candidate_name'],
                                       values=(candidate['category'],
                                              candidate['total_votes'],
                                              contributing_pcs,
                                              last_updated))
    
    def update_stats_display(self, stats):
        """Update system statistics display"""
        # Clear existing stats
        for widget in self.stats_frame.winfo_children():
            widget.destroy()
        
        clients = stats.get('clients', {})
        aggregation = stats.get('aggregation', {})
        syncs = stats.get('syncs', {})
        
        row = 0
        
        # Client statistics
        if clients:
            ttk.Label(self.stats_frame, text="Client Statistics", style='Header.TLabel').grid(row=row, column=0, columnspan=2, sticky=tk.W, pady=(0, 5))
            row += 1
            
            ttk.Label(self.stats_frame, text="Total Clients:").grid(row=row, column=0, sticky=tk.W)
            ttk.Label(self.stats_frame, text=str(clients.get('total_clients', 0))).grid(row=row, column=1, sticky=tk.W)
            row += 1
            
            ttk.Label(self.stats_frame, text="Active Clients:").grid(row=row, column=0, sticky=tk.W)
            ttk.Label(self.stats_frame, text=str(clients.get('active_clients', 0))).grid(row=row, column=1, sticky=tk.W)
            row += 1
            
            ttk.Label(self.stats_frame, text="Total Syncs:").grid(row=row, column=0, sticky=tk.W)
            ttk.Label(self.stats_frame, text=str(clients.get('total_syncs', 0))).grid(row=row, column=1, sticky=tk.W)
            row += 1
        
        # Aggregation statistics
        if aggregation:
            ttk.Label(self.stats_frame, text="Latest Aggregation", style='Header.TLabel').grid(row=row, column=0, columnspan=2, sticky=tk.W, pady=(10, 5))
            row += 1
            
            ttk.Label(self.stats_frame, text="Total Votes:").grid(row=row, column=0, sticky=tk.W)
            ttk.Label(self.stats_frame, text=str(aggregation.get('total_votes', 0))).grid(row=row, column=1, sticky=tk.W)
            row += 1
            
            ttk.Label(self.stats_frame, text="Candidates:").grid(row=row, column=0, sticky=tk.W)
            ttk.Label(self.stats_frame, text=str(aggregation.get('total_candidates', 0))).grid(row=row, column=1, sticky=tk.W)
            row += 1
            
            ttk.Label(self.stats_frame, text="Participating PCs:").grid(row=row, column=0, sticky=tk.W)
            ttk.Label(self.stats_frame, text=str(aggregation.get('participating_pcs', 0))).grid(row=row, column=1, sticky=tk.W)
            row += 1
            
            if aggregation.get('aggregation_timestamp'):
                agg_time = aggregation['aggregation_timestamp'].strftime("%H:%M:%S")
                ttk.Label(self.stats_frame, text="Last Aggregation:").grid(row=row, column=0, sticky=tk.W)
                ttk.Label(self.stats_frame, text=agg_time).grid(row=row, column=1, sticky=tk.W)
                row += 1
        
        # Sync statistics
        if syncs:
            ttk.Label(self.stats_frame, text="Today's Syncs", style='Header.TLabel').grid(row=row, column=0, columnspan=2, sticky=tk.W, pady=(10, 5))
            row += 1
            
            ttk.Label(self.stats_frame, text="Total:").grid(row=row, column=0, sticky=tk.W)
            ttk.Label(self.stats_frame, text=str(syncs.get('syncs_today', 0))).grid(row=row, column=1, sticky=tk.W)
            row += 1
            
            ttk.Label(self.stats_frame, text="Successful:").grid(row=row, column=0, sticky=tk.W)
            success_label = ttk.Label(self.stats_frame, text=str(syncs.get('successful_syncs', 0)))
            success_label.grid(row=row, column=1, sticky=tk.W)
            if syncs.get('successful_syncs', 0) > 0:
                success_label.configure(foreground='green')
            row += 1
            
            ttk.Label(self.stats_frame, text="Failed:").grid(row=row, column=0, sticky=tk.W)
            failed_label = ttk.Label(self.stats_frame, text=str(syncs.get('failed_syncs', 0)))
            failed_label.grid(row=row, column=1, sticky=tk.W)
            if syncs.get('failed_syncs', 0) > 0:
                failed_label.configure(foreground='red')
    
    def update_clients_display(self, clients):
        """Update clients display"""
        # Clear existing items
        for item in self.clients_tree.get_children():
            self.clients_tree.delete(item)
        
        for client in clients:
            status = "Active" if client['is_active'] else "Inactive"
            minutes_ago = client.get('minutes_since_last_seen', 0)
            
            if minutes_ago is None:
                last_seen = "Never"
                status_style = ""
            elif minutes_ago < 60:
                last_seen = f"{minutes_ago}m ago"
                status_style = ""
            elif minutes_ago < 1440:  # 24 hours
                last_seen = f"{minutes_ago//60}h ago"
                status_style = ""
            else:
                last_seen = f"{minutes_ago//1440}d ago"
                status_style = "warning"
            
            item = self.clients_tree.insert('', tk.END,
                                           text=client['pc_id'],
                                           values=(status, last_seen, client['total_syncs']))
            
            # Color code based on status
            if not client['is_active'] or minutes_ago > 120:  # Inactive or not seen for 2+ hours
                self.clients_tree.set(item, 'Status', '⚠️ ' + status)
    
    def update_charts(self, event=None):
        """Update the charts display"""
        try:
            results = self.db.get_vote_summary()
            if not results:
                return
            
            self.fig.clear()
            chart_type = self.chart_type_var.get()
            
            if chart_type == "Bar Chart":
                self.create_bar_chart(results)
            elif chart_type == "Pie Chart":
                self.create_pie_chart(results)
            elif chart_type == "Category Comparison":
                self.create_category_comparison(results)
            
            self.canvas.draw()
            
        except Exception as e:
            print(f"Error updating charts: {e}")
    
    def create_bar_chart(self, results):
        """Create bar chart of results"""
        ax = self.fig.add_subplot(111)
        
        # Get top 10 candidates by votes
        sorted_results = sorted(results, key=lambda x: x['total_votes'], reverse=True)[:10]
        
        candidates = [r['candidate_name'] for r in sorted_results]
        votes = [r['total_votes'] for r in sorted_results]
        
        bars = ax.bar(range(len(candidates)), votes, color=COLORS[:len(candidates)])
        ax.set_xlabel('Candidates')
        ax.set_ylabel('Total Votes')
        ax.set_title('Top 10 Candidates by Votes')
        ax.set_xticks(range(len(candidates)))
        ax.set_xticklabels(candidates, rotation=45, ha='right')
        
        # Add value labels on bars
        for bar, vote in zip(bars, votes):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                   f'{vote}', ha='center', va='bottom')
        
        self.fig.tight_layout()
    
    def create_pie_chart(self, results):
        """Create pie chart of results by category"""
        # Group votes by category
        category_votes = {}
        for result in results:
            category = result['category']
            if category not in category_votes:
                category_votes[category] = 0
            category_votes[category] += result['total_votes']
        
        if not category_votes:
            return
        
        ax = self.fig.add_subplot(111)
        
        categories = list(category_votes.keys())
        votes = list(category_votes.values())
        
        wedges, texts, autotexts = ax.pie(votes, labels=categories, autopct='%1.1f%%',
                                         colors=COLORS[:len(categories)], startangle=90)
        
        ax.set_title('Vote Distribution by Category')
        
        # Make percentage text more readable
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
    
    def create_category_comparison(self, results):
        """Create category comparison chart"""
        # Group by category and get top candidates in each
        categories = {}
        for result in results:
            category = result['category']
            if category not in categories:
                categories[category] = []
            categories[category].append(result)
        
        if not categories:
            return
        
        # Sort categories and get top 3 candidates from each
        sorted_categories = sorted(categories.keys())
        
        ax = self.fig.add_subplot(111)
        
        x_pos = 0
        category_positions = []
        category_labels = []
        
        for category in sorted_categories:
            candidates = sorted(categories[category], key=lambda x: x['total_votes'], reverse=True)[:3]
            
            for i, candidate in enumerate(candidates):
                bar = ax.bar(x_pos, candidate['total_votes'], 
                           color=COLORS[len(category_positions) % len(COLORS)],
                           alpha=0.8 - (i * 0.2))
                
                # Add candidate name as label
                ax.text(x_pos, candidate['total_votes'] + 1, 
                       candidate['candidate_name'][:8] + '...' if len(candidate['candidate_name']) > 8 else candidate['candidate_name'],
                       rotation=90, ha='center', va='bottom', fontsize=8)
                
                x_pos += 1
            
            # Mark category boundary
            if x_pos > 0:
                category_positions.append(x_pos - len(candidates)/2 - 0.5)
                category_labels.append(category)
            x_pos += 0.5  # Space between categories
        
        ax.set_xlabel('Categories')
        ax.set_ylabel('Total Votes')
        ax.set_title('Top Candidates by Category')
        ax.set_xticks(category_positions)
        ax.set_xticklabels(category_labels)
        
        self.fig.tight_layout()
    
    def update_history(self, event=None):
        """Update vote history chart"""
        try:
            range_text = self.history_range_var.get()
            hours_map = {
                "1 hour": 1,
                "6 hours": 6,
                "24 hours": 24,
                "3 days": 72,
                "7 days": 168
            }
            hours = hours_map.get(range_text, 24)
            
            history_data = self.db.get_vote_history(hours)
            
            if not history_data:
                return
            
            self.history_fig.clear()
            ax = self.history_fig.add_subplot(111)
            
            timestamps = [data['aggregation_timestamp'] for data in history_data]
            total_votes = [data['total_votes'] for data in history_data]
            participating_pcs = [data['participating_pcs'] for data in history_data]
            
            # Create dual y-axis chart
            ax2 = ax.twinx()
            
            line1 = ax.plot(timestamps, total_votes, 'b-o', label='Total Votes', linewidth=2, markersize=4)
            line2 = ax2.plot(timestamps, participating_pcs, 'r-s', label='Participating PCs', linewidth=2, markersize=4)
            
            ax.set_xlabel('Time')
            ax.set_ylabel('Total Votes', color='b')
            ax2.set_ylabel('Participating PCs', color='r')
            ax.set_title(f'Vote History - Last {range_text}')
            
            # Format x-axis
            ax.tick_params(axis='x', rotation=45)
            
            # Add legend
            lines1, labels1 = ax.get_legend_handles_labels()
            lines2, labels2 = ax2.get_legend_handles_labels()
            ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
            
            self.history_fig.tight_layout()
            self.history_canvas.draw()
            
        except Exception as e:
            print(f"Error updating history: {e}")
    
    def toggle_auto_refresh(self):
        """Toggle auto refresh on/off"""
        self.auto_refresh = self.auto_refresh_var.get()
        if self.auto_refresh:
            self.start_auto_refresh()
    
    def start_auto_refresh(self):
        """Start auto refresh timer"""
        if self.auto_refresh:
            self.refresh_all_data()
            self.root.after(REFRESH_INTERVAL * 1000, self.start_auto_refresh)
    
    def export_results(self):
        """Export current results to CSV"""
        try:
            results = self.db.get_vote_summary()
            if not results:
                messagebox.showwarning("No Data", "No results to export")
                return
            
            # Create DataFrame
            data = []
            for result in results:
                contributing_pcs = len(json.loads(result['contributing_pcs'])) if result['contributing_pcs'] else 0
                data.append({
                    'Candidate': result['candidate_name'],
                    'Category': result['category'],
                    'Total Votes': result['total_votes'],
                    'Contributing PCs': contributing_pcs,
                    'Last Updated': result['last_updated']
                })
            
            df = pd.DataFrame(data)
            
            # Save to CSV with timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"election_results_{timestamp}.csv"
            df.to_csv(filename, index=False)
            
            messagebox.showinfo("Export Complete", f"Results exported to {filename}")
            
        except Exception as e:
            messagebox.showerror("Export Error", f"Failed to export results: {str(e)}")
    
    def show_system_health(self):
        """Show detailed system health window"""
        health_window = tk.Toplevel(self.root)
        health_window.title("System Health Report")
        health_window.geometry("600x500")
        health_window.configure(bg='#f0f0f0')
        
        # Create scrollable text widget
        text_frame = ttk.Frame(health_window, padding="10")
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        text_widget = tk.Text(text_frame, wrap=tk.WORD, font=('Courier', 10))
        scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=text_widget.yview)
        text_widget.configure(yscrollcommand=scrollbar.set)
        
        text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Generate health report
        try:
            stats = self.db.get_system_stats()
            clients = self.db.get_client_details()
            
            report = self.generate_health_report(stats, clients)
            text_widget.insert(tk.END, report)
            text_widget.config(state=tk.DISABLED)
            
        except Exception as e:
            text_widget.insert(tk.END, f"Error generating health report: {str(e)}")
            text_widget.config(state=tk.DISABLED)
    
    def generate_health_report(self, stats, clients):
        """Generate detailed health report"""
        report = f"""ELECTION SYSTEM HEALTH REPORT
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
{'='*50}

DATABASE CONNECTION: ✅ CONNECTED

CLIENT SUMMARY:
{'='*50}
Total Registered Clients: {stats.get('clients', {}).get('total_clients', 0)}
Active Clients: {stats.get('clients', {}).get('active_clients', 0)}
Total Synchronizations: {stats.get('clients', {}).get('total_syncs', 0)}

AGGREGATION STATUS:
{'='*50}"""
        
        agg = stats.get('aggregation', {})
        if agg:
            report += f"""
Last Aggregation: {agg.get('aggregation_timestamp', 'Never')}
Total Votes Processed: {agg.get('total_votes', 0)}
Total Candidates: {agg.get('total_candidates', 0)}
Participating PCs: {agg.get('participating_pcs', 0)}
Processing Time: {agg.get('duration_seconds', 0):.3f} seconds
Status: {agg.get('status', 'Unknown').upper()}"""
        
        report += f"""

SYNCHRONIZATION STATUS (TODAY):
{'='*50}"""
        
        sync = stats.get('syncs', {})
        if sync:
            success_rate = 0
            if sync.get('syncs_today', 0) > 0:
                success_rate = (sync.get('successful_syncs', 0) / sync.get('syncs_today', 1)) * 100
            
            report += f"""
Total Syncs Today: {sync.get('syncs_today', 0)}
Successful Syncs: {sync.get('successful_syncs', 0)}
Failed Syncs: {sync.get('failed_syncs', 0)}
Success Rate: {success_rate:.1f}%"""
        
        report += f"""

CLIENT DETAILED STATUS:
{'='*50}"""
        
        for client in clients:
            minutes_ago = client.get('minutes_since_last_seen', 0) or 0
            status_icon = "🟢" if client['is_active'] and minutes_ago < 60 else "🟡" if minutes_ago < 120 else "🔴"
            
            report += f"""
{status_icon} PC ID: {client['pc_id']}
   Hostname: {client.get('hostname', 'Unknown')}
   Status: {"Active" if client['is_active'] else "Inactive"}
   First Registered: {client.get('first_registered', 'Unknown')}
   Last Seen: {minutes_ago} minutes ago
   Total Syncs: {client['total_syncs']}
   """
        
        # Add recommendations
        report += f"""

SYSTEM RECOMMENDATIONS:
{'='*50}"""
        
        recommendations = []
        
        # Check inactive clients
        inactive_clients = [c for c in clients if not c['is_active']]
        if inactive_clients:
            recommendations.append(f"⚠️  {len(inactive_clients)} clients are inactive - investigate connectivity")
        
        # Check stale clients
        stale_clients = [c for c in clients if (c.get('minutes_since_last_seen') or 0) > 120]
        if stale_clients:
            recommendations.append(f"⚠️  {len(stale_clients)} clients haven't synced in over 2 hours")
        
        # Check sync failures
        if sync.get('failed_syncs', 0) > 0:
            recommendations.append(f"⚠️  {sync.get('failed_syncs', 0)} sync failures today - check error logs")
        
        # Check recent aggregation
        if agg.get('aggregation_timestamp'):
            last_agg = agg['aggregation_timestamp']
            if isinstance(last_agg, str):
                from dateutil import parser
                last_agg = parser.parse(last_agg)
            
            time_since_agg = datetime.now() - last_agg.replace(tzinfo=None)
            if time_since_agg.total_seconds() > 3600:  # More than 1 hour
                recommendations.append("⚠️  Last aggregation was over 1 hour ago - consider manual aggregation")
        
        if not recommendations:
            recommendations.append("✅ System appears to be running normally")
        
        for rec in recommendations:
            report += f"\n{rec}"
        
        report += f"""

END OF REPORT
{'='*50}
"""
        
        return report

def main():
    """Main application entry point"""
    try:
        # Test database connection
        test_conn = mysql.connector.connect(**DB_CONFIG)
        test_conn.close()
        print("Database connection successful")
        
    except Error as e:
        messagebox.showerror("Database Error", 
                           f"Cannot connect to database.\nPlease check your configuration.\n\nError: {str(e)}")
        return
    
    # Create and run the application
    root = tk.Tk()
    app = ElectionDashboard(root)
    
    # Handle window closing
    def on_closing():
        app.auto_refresh = False
        root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        print("Application interrupted by user")
    except Exception as e:
        print(f"Application error: {e}")
        messagebox.showerror("Application Error", f"An unexpected error occurred: {str(e)}")

if __name__ == "__main__":
    main()
